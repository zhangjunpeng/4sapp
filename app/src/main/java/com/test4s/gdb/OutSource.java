package com.test4s.gdb;

import java.util.List;
import com.test4s.gdb.DaoSession;
import de.greenrobot.dao.DaoException;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT. Enable "keep" sections if you want to edit. 
/**
 * Entity mapped to table OUT_SOURCE.
 */
public class OutSource {

    private Long id;
    private String name;
    private String type;
    private String introuduction;
    private String location;
    private String scale;
    private String webSite;
    private String telePhone;
    private String address;

    /** Used to resolve relations */
    private transient DaoSession daoSession;

    /** Used for active entity operations. */
    private transient OutSourceDao myDao;

    private List<GameInfo> cases;

    public OutSource() {
    }

    public OutSource(Long id) {
        this.id = id;
    }

    public OutSource(Long id, String name, String type, String introuduction, String location, String scale, String webSite, String telePhone, String address) {
        this.id = id;
        this.name = name;
        this.type = type;
        this.introuduction = introuduction;
        this.location = location;
        this.scale = scale;
        this.webSite = webSite;
        this.telePhone = telePhone;
        this.address = address;
    }

    /** called by internal mechanisms, do not call yourself. */
    public void __setDaoSession(DaoSession daoSession) {
        this.daoSession = daoSession;
        myDao = daoSession != null ? daoSession.getOutSourceDao() : null;
    }

    public Long getId() {
        return id;
    }

    public void setId(Long id) {
        this.id = id;
    }

    public String getName() {
        return name;
    }

    public void setName(String name) {
        this.name = name;
    }

    public String getType() {
        return type;
    }

    public void setType(String type) {
        this.type = type;
    }

    public String getIntrouduction() {
        return introuduction;
    }

    public void setIntrouduction(String introuduction) {
        this.introuduction = introuduction;
    }

    public String getLocation() {
        return location;
    }

    public void setLocation(String location) {
        this.location = location;
    }

    public String getScale() {
        return scale;
    }

    public void setScale(String scale) {
        this.scale = scale;
    }

    public String getWebSite() {
        return webSite;
    }

    public void setWebSite(String webSite) {
        this.webSite = webSite;
    }

    public String getTelePhone() {
        return telePhone;
    }

    public void setTelePhone(String telePhone) {
        this.telePhone = telePhone;
    }

    public String getAddress() {
        return address;
    }

    public void setAddress(String address) {
        this.address = address;
    }

    /** To-many relationship, resolved on first access (and after reset). Changes to to-many relations are not persisted, make changes to the target entity. */
    public List<GameInfo> getCases() {
        if (cases == null) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            GameInfoDao targetDao = daoSession.getGameInfoDao();
            List<GameInfo> casesNew = targetDao._queryOutSource_Cases(id);
            synchronized (this) {
                if(cases == null) {
                    cases = casesNew;
                }
            }
        }
        return cases;
    }

    /** Resets a to-many relationship, making the next get call to query for a fresh result. */
    public synchronized void resetCases() {
        cases = null;
    }

    /** Convenient call for {@link AbstractDao#delete(Object)}. Entity must attached to an entity context. */
    public void delete() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.delete(this);
    }

    /** Convenient call for {@link AbstractDao#update(Object)}. Entity must attached to an entity context. */
    public void update() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.update(this);
    }

    /** Convenient call for {@link AbstractDao#refresh(Object)}. Entity must attached to an entity context. */
    public void refresh() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.refresh(this);
    }

}
