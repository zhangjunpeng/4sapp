package com.test4s.gdb;

import java.util.List;
import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;
import de.greenrobot.dao.query.Query;
import de.greenrobot.dao.query.QueryBuilder;

import com.test4s.gdb.GameInfo;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table GAME_INFO.
*/
public class GameInfoDao extends AbstractDao<GameInfo, Long> {

    public static final String TABLENAME = "GAME_INFO";

    /**
     * Properties of entity GameInfo.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Name = new Property(1, String.class, "name", false, "NAME");
        public final static Property Gameid = new Property(2, Long.class, "gameid", false, "GAMEID");
        public final static Property Tips = new Property(3, String.class, "tips", false, "TIPS");
        public final static Property PlayerSource = new Property(4, String.class, "playerSource", false, "PLAYER_SOURCE");
        public final static Property UpTime = new Property(5, Long.class, "upTime", false, "UP_TIME");
        public final static Property Others = new Property(6, String.class, "others", false, "OTHERS");
        public final static Property Introuduction = new Property(7, String.class, "introuduction", false, "INTROUDUCTION");
        public final static Property ImageUrl = new Property(8, String.class, "imageUrl", false, "IMAGE_URL");
        public final static Property UpDescription = new Property(9, String.class, "upDescription", false, "UP_DESCRIPTION");
        public final static Property CompanyGameId = new Property(10, String.class, "companyGameId", false, "COMPANY_GAME_ID");
        public final static Property Comment = new Property(11, String.class, "comment", false, "COMMENT");
    };

    private Query<GameInfo> investment_CasesQuery;
    private Query<GameInfo> outSource_CasesQuery;
    private Query<GameInfo> cP_GameInfoListQuery;
    private Query<GameInfo> investment_GameInfoListQuery;

    public GameInfoDao(DaoConfig config) {
        super(config);
    }
    
    public GameInfoDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'GAME_INFO' (" + //
                "'_id' INTEGER PRIMARY KEY ," + // 0: id
                "'NAME' TEXT," + // 1: name
                "'GAMEID' INTEGER," + // 2: gameid
                "'TIPS' TEXT," + // search: tips
                "'PLAYER_SOURCE' TEXT," + // 4: playerSource
                "'UP_TIME' INTEGER," + // 5: upTime
                "'OTHERS' TEXT," + // 6: others
                "'INTROUDUCTION' TEXT," + // 7: introuduction
                "'IMAGE_URL' TEXT," + // 8: imageUrl
                "'UP_DESCRIPTION' TEXT," + // 9: upDescription
                "'COMPANY_GAME_ID' TEXT," + // 10: companyGameId
                "'COMMENT' TEXT);"); // 11: comment
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'GAME_INFO'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, GameInfo entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(2, name);
        }
 
        Long gameid = entity.getGameid();
        if (gameid != null) {
            stmt.bindLong(3, gameid);
        }
 
        String tips = entity.getTips();
        if (tips != null) {
            stmt.bindString(4, tips);
        }
 
        String playerSource = entity.getPlayerSource();
        if (playerSource != null) {
            stmt.bindString(5, playerSource);
        }
 
        Long upTime = entity.getUpTime();
        if (upTime != null) {
            stmt.bindLong(6, upTime);
        }
 
        String others = entity.getOthers();
        if (others != null) {
            stmt.bindString(7, others);
        }
 
        String introuduction = entity.getIntrouduction();
        if (introuduction != null) {
            stmt.bindString(8, introuduction);
        }
 
        String imageUrl = entity.getImageUrl();
        if (imageUrl != null) {
            stmt.bindString(9, imageUrl);
        }
 
        String upDescription = entity.getUpDescription();
        if (upDescription != null) {
            stmt.bindString(10, upDescription);
        }
 
        String companyGameId = entity.getCompanyGameId();
        if (companyGameId != null) {
            stmt.bindString(11, companyGameId);
        }
 
        String comment = entity.getComment();
        if (comment != null) {
            stmt.bindString(12, comment);
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public GameInfo readEntity(Cursor cursor, int offset) {
        GameInfo entity = new GameInfo( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // name
            cursor.isNull(offset + 2) ? null : cursor.getLong(offset + 2), // gameid
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // tips
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // playerSource
            cursor.isNull(offset + 5) ? null : cursor.getLong(offset + 5), // upTime
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // others
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // introuduction
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // imageUrl
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // upDescription
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // companyGameId
            cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11) // comment
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, GameInfo entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setName(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setGameid(cursor.isNull(offset + 2) ? null : cursor.getLong(offset + 2));
        entity.setTips(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setPlayerSource(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setUpTime(cursor.isNull(offset + 5) ? null : cursor.getLong(offset + 5));
        entity.setOthers(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setIntrouduction(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setImageUrl(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setUpDescription(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setCompanyGameId(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setComment(cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(GameInfo entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(GameInfo entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
    /** Internal query to resolve the "cases" to-many relationship of Investment. */
    public List<GameInfo> _queryInvestment_Cases(Long gameid) {
        synchronized (this) {
            if (investment_CasesQuery == null) {
                QueryBuilder<GameInfo> queryBuilder = queryBuilder();
                queryBuilder.where(Properties.Gameid.eq(null));
                investment_CasesQuery = queryBuilder.build();
            }
        }
        Query<GameInfo> query = investment_CasesQuery.forCurrentThread();
        query.setParameter(0, gameid);
        return query.list();
    }

    /** Internal query to resolve the "cases" to-many relationship of OutSource. */
    public List<GameInfo> _queryOutSource_Cases(Long gameid) {
        synchronized (this) {
            if (outSource_CasesQuery == null) {
                QueryBuilder<GameInfo> queryBuilder = queryBuilder();
                queryBuilder.where(Properties.Gameid.eq(null));
                outSource_CasesQuery = queryBuilder.build();
            }
        }
        Query<GameInfo> query = outSource_CasesQuery.forCurrentThread();
        query.setParameter(0, gameid);
        return query.list();
    }

    /** Internal query to resolve the "gameInfoList" to-many relationship of CP. */
    public List<GameInfo> _queryCP_GameInfoList(Long gameid) {
        synchronized (this) {
            if (cP_GameInfoListQuery == null) {
                QueryBuilder<GameInfo> queryBuilder = queryBuilder();
                queryBuilder.where(Properties.Gameid.eq(null));
                cP_GameInfoListQuery = queryBuilder.build();
            }
        }
        Query<GameInfo> query = cP_GameInfoListQuery.forCurrentThread();
        query.setParameter(0, gameid);
        return query.list();
    }

    /** Internal query to resolve the "gameInfoList" to-many relationship of Investment. */
    public List<GameInfo> _queryInvestment_GameInfoList(Long gameid) {
        synchronized (this) {
            if (investment_GameInfoListQuery == null) {
                QueryBuilder<GameInfo> queryBuilder = queryBuilder();
                queryBuilder.where(Properties.Gameid.eq(null));
                investment_GameInfoListQuery = queryBuilder.build();
            }
        }
        Query<GameInfo> query = investment_GameInfoListQuery.forCurrentThread();
        query.setParameter(0, gameid);
        return query.list();
    }

}
