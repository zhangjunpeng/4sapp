package com.test4s.gdb;

import android.database.sqlite.SQLiteDatabase;

import java.util.Map;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.AbstractDaoSession;
import de.greenrobot.dao.identityscope.IdentityScopeType;
import de.greenrobot.dao.internal.DaoConfig;

import com.test4s.gdb.GameInfo;
import com.test4s.gdb.Investment;
import com.test4s.gdb.OutSource;
import com.test4s.gdb.IP;
import com.test4s.gdb.CP;
import com.test4s.gdb.Distribution;
import com.test4s.gdb.Information;

import com.test4s.gdb.GameInfoDao;
import com.test4s.gdb.InvestmentDao;
import com.test4s.gdb.OutSourceDao;
import com.test4s.gdb.IPDao;
import com.test4s.gdb.CPDao;
import com.test4s.gdb.DistributionDao;
import com.test4s.gdb.InformationDao;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.

/**
 * {@inheritDoc}
 * 
 * @see de.greenrobot.dao.AbstractDaoSession
 */
public class DaoSession extends AbstractDaoSession {

    private final DaoConfig gameInfoDaoConfig;
    private final DaoConfig investmentDaoConfig;
    private final DaoConfig outSourceDaoConfig;
    private final DaoConfig iPDaoConfig;
    private final DaoConfig cPDaoConfig;
    private final DaoConfig distributionDaoConfig;
    private final DaoConfig informationDaoConfig;

    private final GameInfoDao gameInfoDao;
    private final InvestmentDao investmentDao;
    private final OutSourceDao outSourceDao;
    private final IPDao iPDao;
    private final CPDao cPDao;
    private final DistributionDao distributionDao;
    private final InformationDao informationDao;

    public DaoSession(SQLiteDatabase db, IdentityScopeType type, Map<Class<? extends AbstractDao<?, ?>>, DaoConfig>
            daoConfigMap) {
        super(db);

        gameInfoDaoConfig = daoConfigMap.get(GameInfoDao.class).clone();
        gameInfoDaoConfig.initIdentityScope(type);

        investmentDaoConfig = daoConfigMap.get(InvestmentDao.class).clone();
        investmentDaoConfig.initIdentityScope(type);

        outSourceDaoConfig = daoConfigMap.get(OutSourceDao.class).clone();
        outSourceDaoConfig.initIdentityScope(type);

        iPDaoConfig = daoConfigMap.get(IPDao.class).clone();
        iPDaoConfig.initIdentityScope(type);

        cPDaoConfig = daoConfigMap.get(CPDao.class).clone();
        cPDaoConfig.initIdentityScope(type);

        distributionDaoConfig = daoConfigMap.get(DistributionDao.class).clone();
        distributionDaoConfig.initIdentityScope(type);

        informationDaoConfig = daoConfigMap.get(InformationDao.class).clone();
        informationDaoConfig.initIdentityScope(type);

        gameInfoDao = new GameInfoDao(gameInfoDaoConfig, this);
        investmentDao = new InvestmentDao(investmentDaoConfig, this);
        outSourceDao = new OutSourceDao(outSourceDaoConfig, this);
        iPDao = new IPDao(iPDaoConfig, this);
        cPDao = new CPDao(cPDaoConfig, this);
        distributionDao = new DistributionDao(distributionDaoConfig, this);
        informationDao = new InformationDao(informationDaoConfig, this);

        registerDao(GameInfo.class, gameInfoDao);
        registerDao(Investment.class, investmentDao);
        registerDao(OutSource.class, outSourceDao);
        registerDao(IP.class, iPDao);
        registerDao(CP.class, cPDao);
        registerDao(Distribution.class, distributionDao);
        registerDao(Information.class, informationDao);
    }
    
    public void clear() {
        gameInfoDaoConfig.getIdentityScope().clear();
        investmentDaoConfig.getIdentityScope().clear();
        outSourceDaoConfig.getIdentityScope().clear();
        iPDaoConfig.getIdentityScope().clear();
        cPDaoConfig.getIdentityScope().clear();
        distributionDaoConfig.getIdentityScope().clear();
        informationDaoConfig.getIdentityScope().clear();
    }

    public GameInfoDao getGameInfoDao() {
        return gameInfoDao;
    }

    public InvestmentDao getInvestmentDao() {
        return investmentDao;
    }

    public OutSourceDao getOutSourceDao() {
        return outSourceDao;
    }

    public IPDao getIPDao() {
        return iPDao;
    }

    public CPDao getCPDao() {
        return cPDao;
    }

    public DistributionDao getDistributionDao() {
        return distributionDao;
    }

    public InformationDao getInformationDao() {
        return informationDao;
    }

}
