package com.test4s.gdb;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import com.test4s.gdb.OutSource;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table OUT_SOURCE.
*/
public class OutSourceDao extends AbstractDao<OutSource, Long> {

    public static final String TABLENAME = "OUT_SOURCE";

    /**
     * Properties of entity OutSource.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Name = new Property(1, String.class, "name", false, "NAME");
        public final static Property Type = new Property(2, String.class, "type", false, "TYPE");
        public final static Property Introuduction = new Property(3, String.class, "introuduction", false, "INTROUDUCTION");
        public final static Property Location = new Property(4, String.class, "location", false, "LOCATION");
        public final static Property Scale = new Property(5, String.class, "scale", false, "SCALE");
        public final static Property WebSite = new Property(6, String.class, "webSite", false, "WEB_SITE");
        public final static Property TelePhone = new Property(7, String.class, "telePhone", false, "TELE_PHONE");
        public final static Property Address = new Property(8, String.class, "address", false, "ADDRESS");
    };

    private DaoSession daoSession;


    public OutSourceDao(DaoConfig config) {
        super(config);
    }
    
    public OutSourceDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
        this.daoSession = daoSession;
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'OUT_SOURCE' (" + //
                "'_id' INTEGER PRIMARY KEY ," + // 0: id
                "'NAME' TEXT," + // 1: name
                "'TYPE' TEXT," + // 2: type
                "'INTROUDUCTION' TEXT," + // search: introuduction
                "'LOCATION' TEXT," + // 4: location
                "'SCALE' TEXT," + // 5: scale
                "'WEB_SITE' TEXT," + // 6: webSite
                "'TELE_PHONE' TEXT," + // 7: telePhone
                "'ADDRESS' TEXT);"); // 8: address
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'OUT_SOURCE'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, OutSource entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(2, name);
        }
 
        String type = entity.getType();
        if (type != null) {
            stmt.bindString(3, type);
        }
 
        String introuduction = entity.getIntrouduction();
        if (introuduction != null) {
            stmt.bindString(4, introuduction);
        }
 
        String location = entity.getLocation();
        if (location != null) {
            stmt.bindString(5, location);
        }
 
        String scale = entity.getScale();
        if (scale != null) {
            stmt.bindString(6, scale);
        }
 
        String webSite = entity.getWebSite();
        if (webSite != null) {
            stmt.bindString(7, webSite);
        }
 
        String telePhone = entity.getTelePhone();
        if (telePhone != null) {
            stmt.bindString(8, telePhone);
        }
 
        String address = entity.getAddress();
        if (address != null) {
            stmt.bindString(9, address);
        }
    }

    @Override
    protected void attachEntity(OutSource entity) {
        super.attachEntity(entity);
        entity.__setDaoSession(daoSession);
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public OutSource readEntity(Cursor cursor, int offset) {
        OutSource entity = new OutSource( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // name
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // type
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // introuduction
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // location
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // scale
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // webSite
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // telePhone
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8) // address
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, OutSource entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setName(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setType(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setIntrouduction(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setLocation(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setScale(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setWebSite(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setTelePhone(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setAddress(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(OutSource entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(OutSource entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
